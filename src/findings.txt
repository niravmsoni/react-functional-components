97. Project setup
    Prior to React 16.8, there was only class based components,
    We can also manage state in Functional components by using hooks.
    We can write entire application using functional components now
    Created basic structure of WatchOPedia

98. 
    Created basic UI for counter where we created 2 buttons: +1 and -1 and integrated it in index.js

99. UseState
    With functional components, we cannot directly use state(Like we used in class based components)
    We need to import hooks. For this, the hook we're going to use is known as useState().

    Hooks can only be used in FUNCTIONAL COMPONENTS.
    Need to import hook by using:
        import {useState} from "react";

    JS Code below:
    const Counter = () => {

    useState();
    useState();

    return (
        <div className="col-12 col-md-2 offset-md-5 border  text-white">
        </div>
    );
};

    With React, the hooks cannot be conditional. Every time a component is rendered, all useState() will be executed in SEQUENTIAL ORDER

    We can initialize whatever value we want the state to have in the useState parameter.
    For ex: In our counter app, since we want it to start always with 0, we will write the statement like this:
        useState(0);

    useState() always returns 2 values as below:
        const [counter, setCounter] = useState(10);
    where
        counter = name of the counter
        &
        setCounter = how we will update that particular state i.e. setCounter is a method that we will create to increment the count

100. Updating State with integers
        Created 2 new functions and bound them with OnClick event:
            incrementCounter() and decrementCounter()

        Simply access the counter variable(since that is written as output of useState) and +1 or -1 to it.
        //Approach#1[INCORRECT]
            function incrementCounter(){
                setCounter(counter + 1);
            }

            function decrementCounter(){
                setCounter(counter - 1);
                setCounter(counter - 1);
            }

        If we access it in this manner, decrementCounter will only decrement it by 1.
        SAME AS CLASS COMPONENT, we need to use and pass the PREVSTATE and work with that and not directly with the counter variable

        //Approach#2[CORRECT]
            function incrementCounter(){
                setCounter((prevState) => {
                    return prevState + 1;
                });
            }

            function decrementCounter(){
                setCounter((prevState) => {
                    return prevState - 1;
                });

                setCounter((prevState) => {
                    return prevState - 1;
                });
            }

    Important
        - For setting default value of a state,
            In class component,
                We used to do it in constructor and it was executed ONLY ONCE.
            In fn component
                Everytime, the component is re-rendered, it will reset it to the default value specified

            For MAKING SURE WITH FN COMPONENT, THE EXECUTION HAPPENS ONLY ONCE, ASSIGN VALUE IN USESTATE USING OBJECT Like:
                useState(() =>{
                    return 10;
                    });

            To prove it, if we have the below statement, it DOES NOT UPDATE WHEN COMPONENT IS RE-rendered(Hitting +1 or -1)
                const [counter, setCounter] = useState(() =>{
                    console.log('Inside useState');
                    return 10;
                });

            To counter it,


            function initialSetup(){
                console.log('Inside InitialSetup');
                return 10;
            }

             const [counter, setCounter] = useState(initialSetup());

             //In this case, every time we hit +1 or -1, the initialSetup() is called.

101. States with object

    Under useState(), changed "return 10;" to "return {counter: 10}".

        const [counterState, setCounterState] = useState(() =>{
        return {counter: 10}
    });


    Then, to alter the state value, made sure to return the counter object by +1 or -1 value of prevState.counter.
    Anytime, to access the state, used the {counterState.counter} value

    function incrementCounter(){
        setCounterState((prevState) => {
            return {counter: prevState.counter + 1};
        });
    }

    function decrementCounter(){
        setCounterState((prevState) => {
            return {counter: prevState.counter - 1};
        });
    }

    <span className="text-success">{counterState.counter}</span>

102. Difference w.r.t class component
    Implementation of useState and setState are different.
    With useState(), IT COMPLETELY REPLACES ALL THE STATE PROPERTIES WITH WHAT WE ARE UPDATING IT WITH.
    WHEREAS with setState(), ONLY THE VALUE WHICH WE'RE CHANGING WILL BE IMPACTED AND NOT THE COMPLETE STATE OBJECT

103. Separation useStates.
    To solve the problem, we can have to separate useStates(), one for managing just the counter and 2nd to display fun.

    That way, if we remove the ...prevState spreadOperator from the increment/decrement functions, it will not impact the other state and fun will be displayed constantly.

104. Render hardcoded Movies and develop movie form.
    Created 3 new components: AddMovie, MovieList and MoviePage.
    Added a form in AddMovie component.
    In MoviePage, imported both the remaining components and shown them

105. Add Movie.
    Completed add movie implementation.